/**
 * ARCHITECTURE D'ANALYSE AEO - PHASE 1: INTERFACES FONDAMENTALES
 * 
 * Architecture hi√©rarchique: Section ‚Üí Drawers ‚Üí Cards
 * Structure: üîç MAIN SECTION (XX%) ‚Üí ‚úÖ Sub-Section (Drawer) ‚Üí Metric (XX pts)
 */

/**
 * Statuts de performance avec codes couleur
 */
export type PerformanceStatus = 'excellent' | 'good' | 'warning' | 'error';

/**
 * Mapping des couleurs pour chaque statut
 */
export const STATUS_COLORS: Record<PerformanceStatus, string> = {
  excellent: 'green',
  good: 'blue', 
  warning: 'orange',
  error: 'red'
} as const;

/**
 * Carte m√©trique individuelle - √âl√©ment de base de l'architecture
 * Contient les informations d√©taill√©es et le contenu √©ducatif
 */
export interface MetricCard {
  /** Identifiant unique de la m√©trique */
  id: string;
  
  /** Nom affich√© de la m√©trique */
  name: string;
  
  /** Score obtenu pour cette m√©trique (en points) */
  score: number;
  
  /** Score maximum possible pour cette m√©trique */
  maxScore: number;
  
  /** Statut de performance avec code couleur */
  status: PerformanceStatus;
  
  /** Explication d√©taill√©e de la m√©trique et de son importance */
  explanation: string;
  
  /** Liste des probl√®mes identifi√©s (vide si aucun probl√®me) */
  problems: string[];
  
  /** Liste des solutions recommand√©es */
  solutions: string[];
  
  /** Message de succ√®s personnalis√© affich√© quand aucun probl√®me */
  successMessage: string;
  
  /** Donn√©es techniques brutes (optionnel) */
  rawData?: Record<string, any>;
}

/**
 * Section tiroir extensible - Contient plusieurs cartes m√©triques
 * Repr√©sente une sous-cat√©gorie d'analyse
 */
export interface DrawerSubSection {
  /** Identifiant unique du tiroir */
  id: string;
  
  /** Nom affich√© du tiroir */
  name: string;
  
  /** Description courte de la sous-section */
  description: string;
  
  /** Score total du tiroir (somme des cartes) */
  totalScore: number;
  
  /** Score maximum possible pour ce tiroir */
  maxScore: number;
  
  /** Statut global du tiroir (bas√© sur la moyenne des cartes) */
  status: PerformanceStatus;
  
  /** Liste des cartes m√©triques contenues */
  cards: MetricCard[];
  
  /** √âtat d'expansion du tiroir (pour l'UI) */
  isExpanded?: boolean;
}

/**
 * Section principale - Contient plusieurs tiroirs
 * Repr√©sente une cat√©gorie majeure d'analyse AEO
 */
export interface MainSection {
  /** Identifiant unique de la section */
  id: string;
  
  /** Nom affich√© de la section */
  name: string;
  
  /** Emoji repr√©sentatif de la section */
  emoji: string;
  
  /** Description de la section */
  description: string;
  
  /** Pourcentage de poids dans le score final */
  weightPercentage: number;
  
  /** Score total de la section */
  totalScore: number;
  
  /** Score maximum possible pour cette section */
  maxScore: number;
  
  /** Statut global de la section */
  status: PerformanceStatus;
  
  /** Liste des tiroirs (sous-sections) */
  drawers: DrawerSubSection[];
}

/**
 * P√©nalit√© globale - Syst√®me de p√©nalit√©s affectant le score final
 * Principalement pour robots.txt bloquant les bots IA
 */
export interface GlobalPenalty {
  /** Type de p√©nalit√© */
  type: 'robots_txt_blocking' | 'other';
  
  /** Description de la p√©nalit√© */
  description: string;
  
  /** Facteur de p√©nalit√© (0.0 = aucune p√©nalit√©, 0.7 = 70% de p√©nalit√© max) */
  penaltyFactor: number;
  
  /** D√©tails techniques de la p√©nalit√© */
  details: string[];
  
  /** Solutions pour corriger la p√©nalit√© */
  solutions: string[];
}

/**
 * R√©sultat final de l'analyse AEO
 * Contient toutes les sections et le calcul du score global
 */
export interface AEOScoreResult {
  /** URL analys√©e */
  url: string;
  
  /** Timestamp de l'analyse */
  analyzedAt: Date;
  
  /** Version de l'analyseur utilis√© */
  analyzerVersion: string;
  
  /** Score brut total (avant p√©nalit√©s) */
  rawScore: number;
  
  /** Score final (apr√®s application des p√©nalit√©s) */
  finalScore: number;
  
  /** Score maximum possible */
  maxPossibleScore: number;
  
  /** Pourcentage final (0-100) */
  scorePercentage: number;
  
  /** Statut global de l'analyse */
  overallStatus: PerformanceStatus;
  
  /** Les 5 sections principales d'analyse */
  sections: {
    /** D√©couvrabilit√© (20%) - Visibilit√© par les moteurs de recherche et IA */
    discoverability: MainSection;
    
    /** Donn√©es structur√©es (25%) - Schema.org, JSON-LD, m√©tadonn√©es */
    structuredData: MainSection;
    
    /** Formatage LLM (25%) - Optimisation pour les mod√®les de langage */
    llmFormatting: MainSection;
    
    /** Accessibilit√© (15%) - Standards WCAG et utilisabilit√© */
    accessibility: MainSection;
    
    /** Lisibilit√© (15%) - Clart√© et structure du contenu */
    readability: MainSection;
  };
  
  /** P√©nalit√©s globales appliqu√©es */
  globalPenalties: GlobalPenalty[];
  
  /** R√©sum√© ex√©cutif de l'analyse */
  executiveSummary: {
    /** Points forts identifi√©s */
    strengths: string[];
    
    /** Probl√®mes critiques √† corriger en priorit√© */
    criticalIssues: string[];
    
    /** Recommandations d'am√©lioration */
    recommendations: string[];
  };
}

/**
 * Configuration des sections avec leurs poids
 */
export const SECTION_WEIGHTS: Record<keyof AEOScoreResult['sections'], number> = {
  discoverability: 20,
  structuredData: 25,
  llmFormatting: 25,
  accessibility: 15,
  readability: 15
} as const;

/**
 * Constantes pour les seuils de performance
 */
export const PERFORMANCE_THRESHOLDS = {
  excellent: 90, // 90-100%
  good: 70,      // 70-89%
  warning: 50,   // 50-69%
  error: 0       // 0-49%
} as const;

/**
 * Helper type pour la validation des pourcentages de poids
 */
type SectionWeightsSum = typeof SECTION_WEIGHTS[keyof typeof SECTION_WEIGHTS];
// V√©rification que la somme des poids = 100%
const _weightsValidation: 100 = (
  SECTION_WEIGHTS.discoverability +
  SECTION_WEIGHTS.structuredData +
  SECTION_WEIGHTS.llmFormatting +
  SECTION_WEIGHTS.accessibility +
  SECTION_WEIGHTS.readability
) as 100; 